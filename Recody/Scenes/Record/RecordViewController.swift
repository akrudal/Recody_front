//
//  RecordViewController.swift
//  Recody
//
//  Created by 마경미 on 2022/08/30.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RecordDisplayLogic: AnyObject {
    func displaySomething(viewModel: Record.Something.ViewModel)
}

class RecordViewController: UIViewController, RecordDisplayLogic {
    var interactor: RecordBusinessLogic?
    var router: (NSObjectProtocol & RecordRoutingLogic & RecordDataPassing)?

    // MARK: Object lifecycle
    let works: [Work] = [
        Work(id: "0", name: "Attention", image: "attention"),
        Work(id: "1", name: "1987", image: "1987"),
        Work(id: "2", name: "CallMeByYourName", image: "callMeByYourName"),
        Work(id: "3", name: "her", image: "her"),
        Work(id: "4", name: "Pink Venom", image: "pinkVenom"),
        Work(id: "5", name: "마더", image: "mother"),
        Work(id: "6", name: "블랙 팬서", image: "blackPanther"),
        Work(id: "7", name: "스파이더맨", image: "spiderman"),
        Work(id: "8", name: "After Like", image: "afterLike")
    ]
    let genre = [
        "전체", "로맨틱 코미디", "스릴러", "액션", "S/F", "애니메이션"
    ]

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = RecordInteractor()
        let presenter = RecordPresenter()
        let router = RecordRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        doSomething()
    }

    // MARK: Do something

    @IBOutlet weak var workTabCollectionView: UICollectionView! {
        didSet {
            workTabCollectionView.collectionViewLayout = createLayout()
            workTabCollectionView.register(TabHeader.self, forSupplementaryViewOfKind: "header1", withReuseIdentifier: "tabHeader")
        }
    }

    func doSomething() {
        let request = Record.Something.Request()
        interactor?.doSomething(request: request)
    }

    func createLayout() -> UICollectionViewCompositionalLayout {
        let size = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .fractionalHeight(1))
        let item = NSCollectionLayoutItem(layoutSize: size)
        let group = NSCollectionLayoutGroup.horizontal(layoutSize: size, subitems: [item])
        let section = NSCollectionLayoutSection(group: group)
        section.orthogonalScrollingBehavior = .paging
        let header = NSCollectionLayoutBoundarySupplementaryItem(layoutSize: .init(widthDimension: .fractionalWidth(1), heightDimension: .absolute(40)), elementKind: "header1", alignment: . topLeading)
        section.boundarySupplementaryItems = [
            header
        ]
        let layout = UICollectionViewCompositionalLayout(section: section)
        return layout
    }

    func displaySomething(viewModel: Record.Something.ViewModel) {
        // nameTextField.text = viewModel.name
    }
}
