//
//  HomeViewController.swift
//  Recody
//
//  Created by 마경미 on 2022/08/04.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class HomeViewController: CommonVC {
    var viewModel = HomeViewModel()
    
    let works: [Work] = [
        Work(id: "0", name: "Attention", image: "attention"),
        Work(id: "1", name: "1987", image: "1987"),
        Work(id: "2", name: "CallMeByYourName", image: "callMeByYourName"),
        Work(id: "3", name: "her", image: "her"),
        Work(id: "4", name: "Pink Venom", image: "pinkVenom"),
        Work(id: "5", name: "마더", image: "mother"),
        Work(id: "6", name: "블랙 팬서", image: "blackPanther"),
        Work(id: "7", name: "스파이더맨", image: "spiderman"),
        Work(id: "8", name: "After Like", image: "afterLike")
    ]

    @IBOutlet weak var workScrollView: UIScrollView!
    @IBOutlet weak var workStackView: UIStackView!
    @IBOutlet weak var notificationButton: UIButton!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setUp()
        setWorkView()
    }
    
    func setUp() {
        self.interactor?.just(UseCase.setting).drop()
        self.notificationButton.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(clickEvent)))
    }
    
    func setWorkView() {
        for work in works {
            let view = WorkView()
            view.setView(work: work)
            view.tag = 109
            view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(clickEvent(_:))))
            workStackView.addArrangedSubview(view)
        }
    }

    @objc func clickEvent(_ sender: UITapGestureRecognizer) {
        if let tag = sender.view?.tag {
            guard let useCase = UseCase(rawValue: tag) else { return }
            switch useCase {
            default:
                self.interactor?.just(useCase).drop()
            }
        }
    }

    enum UseCase: Int, OrderType {
        case pushRecordList = 100
        case setting = 105
        case notification = 106
        case moveReviewing = 107
        case workCategory = 108
        case pushWorkDetailInfo = 109
        case pushNotification = 110
        var number: Int {
            return self.rawValue
        }
    }
    
    override func display(orderNumber: Int) {
        guard let useCase = UseCase(rawValue: orderNumber) else { return }
        switch useCase {
        case .setting:
//            let email = "Emelia_Harvey@hotmail.com"
//            let password = "newPassword"
//            self.interactor?.just(useCase).api(.login(email, password))
    
            self.interactor?.just(useCase).api(.getUserInfomation)
            self.interactor?.just(useCase).api(.getMyRecentContinuingRecord)
            self.interactor?.just(useCase).api(.getMovies)
        case .pushRecordList:
            router?.pushViewController(RoutingLogic.Navigation.recordList, dataStore: nil)
        case .pushWorkDetailInfo:
            router?.pushViewController(RoutingLogic.Navigation.workDetailInfo, dataStore: nil)
        case .pushNotification:
            router?.pushViewController(RoutingLogic.Navigation.notification, dataStore: nil)
        default:
            break
        }
    }
    
    override func displayErorr(orderNumber: Int, msg: String?) {
        guard let useCase = UseCase(rawValue: orderNumber) else { return }
        switch useCase {
        default:
            self.presenter?.alertService.showToast("\(useCase)")
        }
    }
    
    override func displaySuccess(orderNumber: Int, dataStore: DataStoreType?) {
        guard let useCase = UseCase(rawValue: orderNumber) else { return }
        switch useCase {
        case .setting:
            if let data = dataStore?.data(useCase)?.fetch(UserDataModel.self) {
                let temp = data.data["signInInfo"] as? [String: String]
                guard let accessToken = temp?["accessToken"] else { return }
                guard let refreshToken = temp?["refreshToken"] else { return }
                KeyChain.create(key: "accessToken", token: accessToken)
                KeyChain.create(key: "refreshToken", token: refreshToken)
                print("요깅깅교익요긱")
                print(data)
            }
        default:
            self.presenter?.alertService.showToast("\(useCase)")
        }
    }
}
